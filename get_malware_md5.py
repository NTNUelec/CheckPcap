import time
import csv

from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.support.ui import Select
from bs4 import BeautifulSoup

csv_file_name = "malware_md5.csv"
date = ["June", "12"] # The date you want collect
url = "https://app.any.run/submissions/"
webdriver_path = './chromedriver'
account  = ""
password = ""

def click_filter(driver):
    while 1:
        try:        
            filter = driver.find_element_by_id("history-filterBtn")
            filter.click()            
            break
        except:
            print("[Wait] page is loading")
            time.sleep(1)

    return 

def click_selection(driver):
    while 1:
        try:            
            # choose pe exe
            extension = driver.find_element_by_xpath('//*[@id="historyMenu"]/div/div/div[1]/div/form/div[2]/button')
            extension.click()
            time.sleep(1)     
            PE_exe = driver.find_element_by_xpath('//*[@id="historyMenu"]/div/div/div[1]/div/form/div[2]/div/ul/li[1]/a')
            PE_exe.click()
            time.sleep(1)
            extension = driver.find_element_by_xpath('//*[@id="historyMenu"]/div/div/div[1]/div/form/div[2]/button')
            extension.click()
            time.sleep(1)

            # choose malicious
            verdict = driver.find_element_by_xpath('//*[@id="historyMenu"]/div/div/div[2]/div/div/div/button')
            verdict.click()
            time.sleep(1)
            malicious = driver.find_element_by_xpath('//*[@id="historyMenu"]/div/div/div[2]/div/div/div/div/ul/li[1]/a')
            malicious.click()
            time.sleep(1)
            verdict = driver.find_element_by_xpath('//*[@id="historyMenu"]/div/div/div[2]/div/div/div/button')
            verdict.click()
            time.sleep(1)

            # click search
            search = driver.find_element_by_xpath('//*[@id="historySearchBtn"]')
            search.click()
            time.sleep(1)
            
            print("[OK] filter setting is OK")
            break

        except:
            print("[Error] page may be changed, you need to check the page source code")
            time.sleep(1)

    return

""" Error is here """
def click_next_page(driver):
    # here need to use css selector
    next_page = driver.find_element_by_css_selector('.history-table--footer__next')
    next_page.click()
    time.sleep(5)

    return


def get_md5_value(driver):
    md5_set = set()
    stop_flag = False
    now_page = 1
	
    while (stop_flag == False):
        html = driver.page_source
        soup = BeautifulSoup(html, 'lxml')
		
        # finf the <div> and specified class
        row_elements = soup.find_all('div', class_='history-table--content__row')
        for row_element in row_elements:
            os_time      = row_element.find('div', class_='os__time').get_text().strip()
            md5_value    = row_element.find('div', class_='hash__value').get_text().strip()
           
            day, mouth = os_time.split(" ")[0], os_time.split(" ")[1]
            if mouth == date[0] and day == date[1]:
                md5_set.add(md5_value)
            elif now_page < 10:
            	continue
            else:
                stop_flag = True
                break

        # ERROR IS HERE
        if stop_flag == False:
            click_next_page(driver)
            now_page += 1
            print("[OK] change to next page")
        
    return md5_set


def store_md5_csv(csv_file_name, md5_set):
    with open(csv_file_name, "w") as csvfile:
        writer = csv.writer(csvfile, delimiter=',')
        writer.writerow(["md5_value"])

        for md5_value in md5_set:
            writer.writerow([md5_value.strip("\n")])

def login(driver):
	# login page
	time.sleep(1)
	login_page = driver.find_element_by_xpath('/html/body/nav/ul[2]/li[4]')
	login_page.click()
	
	# input account
	time.sleep(1)
	login_account  = driver.find_element_by_xpath('//*[@id="at-field-username_and_email"]')
	login_account.send_keys(account)

	# input password
	time.sleep(1)
	login_password = driver.find_element_by_xpath('//*[@id="at-field-password"]')
	login_password.send_keys(password)

	# Click login
	time.sleep(1)
	login = driver.find_element_by_xpath('//*[@id="at-btn"]')
	login.click()
	
	
def main():   
    driver = webdriver.Chrome(executable_path=webdriver_path)
    driver.get(url)
    driver.set_window_size(1920, 1080)
	
    # login
    login(driver)
	
    # wait web loading and open the filter 
    click_filter(driver)

    print("[OK] page is OK")

    time.sleep(1)

    # change the selection
    click_selection(driver)

    print("[Wait] now searching")

    time.sleep(1)

    # get malware md5 value from page
    md5_set = get_md5_value(driver)

    # save md5 value to csv
    store_md5_csv(csv_file_name, md5_set)

    driver.close()
    
main()
        
"""
get_malware_html
"""

